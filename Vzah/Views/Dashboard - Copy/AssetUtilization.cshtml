<canvas id="myChart" height="200"></canvas>
<script src="~/Scripts/chart.js@2.8.0.js"></script>

<script>
    Chart.defaults.groupableBar = Chart.helpers.clone(Chart.defaults.bar);

    var helpers = Chart.helpers;
    Chart.controllers.groupableBar = Chart.controllers.bar.extend({
      
    });

    var data = {
        labels: ["Todays", "Current Week", "Current Month"],
        datasets: [
            {
                label: "Working",
                backgroundColor: "rgba(99,255,132,0.2)",
                data: [@ViewBag.WorkingValue],
                stack: 1
            },
            {
                label: "Running",
                backgroundColor: "rgba(99,132,255,0.2)",
                data: [@ViewBag.RunningValue],
                stack: 2
            },
            {
                label: "Idle",
                backgroundColor: "rgba(255,99,132,0.2)",
                data: [@ViewBag.IdleValue],
                stack: 3
            }
        ]
    };

    var ctx = document.getElementById("myChart").getContext("2d");
    new Chart(ctx, {
        type: 'groupableBar',
        data: data,
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        max: @ViewBag.MaxValueAU,
                    },
                    //stacked: true,
                    display: false
                }]
            },
            onClick: function (c, i) {
                if (i[0] != undefined) {
                    e = i[0];
                    console.log(e._index)
                    var x_value = this.data.labels[e._index];
                    var y_value = this.data.datasets[0].data[e._index];
                    alert(x_value + ' ' + y_value);
                }

            }
        },
        showTooltips: false,
        onAnimationComplete: function () {

            var ctx = this.chart.ctx;
            ctx.font = this.scale.font;
            ctx.fillStyle = this.scale.textColor
            ctx.textAlign = "center";
            ctx.textBaseline = "bottom";

            this.datasets.forEach(function (dataset) {
                dataset.bars.forEach(function (bar) {
                    ctx.fillText(bar.value, bar.x, bar.y - 5);
                });
            })
        }

    });
    Chart.plugins.register({
        afterDatasetsDraw: function (chart, easing) {
            // To only draw at the end of animation, check for easing === 1
            var ctx = chart.ctx;

            chart.data.datasets.forEach(function (dataset, i) {
                var meta = chart.getDatasetMeta(i);
                if (!meta.hidden) {
                    meta.data.forEach(function (element, index) {
                        // Draw the text in black, with the specified font
                        ctx.fillStyle = 'rgb(0, 0, 0)';

                        var fontSize = 16;
                        var fontStyle = 'normal';
                        var fontFamily = 'Helvetica Neue';
                        ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);

                        // Just naively convert to string for now
                        var dataString = dataset.data[index].toString();

                        // Make sure alignment settings are correct
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';

                        var padding = 5;
                        var position = element.tooltipPosition();
                        ctx.fillText(dataString, position.x, position.y - (fontSize / 2) - padding);
                    });
                }
            });
        }
    });


</script>
